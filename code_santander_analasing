# %% [markdown]
# Importa√ß√£o das bibliotecas necess√°rias:

# %%
import pandas as pd 
import os
import numpy as np
from rapidfuzz import process, fuzz
from IPython.display import display

# %%
# Configurar Pandas para exibir todas as linhas e colunas
pd.set_option("display.max_rows", None)  # Exibir todas as linhas
pd.set_option("display.max_columns", None)  # Exibir todas as colunas
pd.set_option("display.width", 1000)  # Ajustar a largura da sa√≠da

# %%
#Carregando as planilhas
caminho_erp =r"C:\Users\yan.fernandes\Downloads\An√°lise de Titulos de Cart√£o de Terceiros - SFR (1).csv"
caminho_santander =r"C:\Users\yan.fernandes\Downloads\Recebivel_Completos_9784485_20250101_20250131_17b71b847b834144add843c70f2feea1.xlsx"
# ‚úÖ Fun√ß√£o para carregar a planilha automaticamente (Excel ou CSV)
def carregar_planilha(caminho):
    if caminho.endswith(".csv"):
        return pd.read_csv(caminho, sep=";", encoding="latin1")  # Ajuste o separador se necess√°rio
    else:
        return pd.read_excel(caminho, sheet_name="Detalhado") #Arquivo Santander tem uma aba que precisa ser considerada, poderia ser digitado manual!!!!
# ‚úÖ Carregar as planilhas
df_erp = carregar_planilha(caminho_erp)
#print(df_erp.columns)
#print(df_erp.dtypes)
df_santander = carregar_planilha(caminho_santander)



# %%
#Limpando e organizando a planilha do Santander
#Fun√ß√£o para limpar as primeiras linhas do Santander
def limpar_santander(df):
    df = df.iloc[6:].reset_index(drop=False)  # Remove as 7 primeiras linhas e reseta os √≠ndices
    df.columns = df.iloc[0]  # Define a primeira linha restante como cabe√ßalho
    df = df[1:].reset_index(drop=True)  # Remove a linha duplicada que virou cabe√ßalho
    return df

# ‚úÖ Exibir informa√ß√µes b√°sicas sobre os arquivos carregados
df_santander = limpar_santander(df_santander)
#display(df_santander)
df_santander = df_santander.filter(items=["EC CENTRALIZADOR", "DATA DE VENCIMENTO", "TIPO DE LAN√áAMENTO", "PARCELAS", "AUTORIZA√á√ÉO", "N√öMERO COMPROVANTE DE VENDA (NSU)", "DATA DA VENDA","VALOR DA PARCELA", "VALOR L√çQUIDO"])

#Convertendo colunas para n√∫mero
df_santander["VALOR L√çQUIDO"] = pd.to_numeric(df_santander["VALOR L√çQUIDO"], errors="coerce")
df_santander["VALOR DA PARCELA"] = pd.to_numeric(df_santander["VALOR DA PARCELA"], errors="coerce")


#Convertendo parcelas para n√∫meros inteiros
df_santander[["PARCELA", "TOTAL_PARCELAS"]] = df_santander["PARCELAS"].str.extract(r"(\d+)\s+de\s+(\d+)") #Agora na planilha santander, o campo parcela vem em apenas 1 celula precisando separar em colunas.
df_santander["PARCELA"] = pd.to_numeric(df_santander["PARCELA"], errors="coerce")
df_santander["PARCELA"] = df_santander["PARCELA"].fillna(1).astype(int) #Essa linha converte o n√∫mero da parcela do tipo float para interger por√©m quando a venda √© no d√©bito o mesmo vem zerado. Sendo assim optou-se por preencher esse campo como valor 1, o mesmo ocorre para quantidade de parcelas
df_santander["TOTAL_PARCELAS"] = pd.to_numeric(df_santander["TOTAL_PARCELAS"], errors="coerce")
df_santander["TOTAL_PARCELAS"] = df_santander["TOTAL_PARCELAS"].fillna(1).astype(int)

#Convertendo Data do pagamento e Data do lan√ßamento para data
df_santander["DATA DA VENDA"] = pd.to_datetime(df_santander["DATA DA VENDA"], format="%d/%m/%Y", errors="coerce")
df_santander["DATA DE VENCIMENTO"] = pd.to_datetime(df_santander["DATA DE VENCIMENTO"], format="%d/%m/%Y", errors="coerce")

#Separando os valores de aluguel de m√°quina e cancelamento dos valores da GETNET.
df_cancelamento_venda = df_santander[df_santander["TIPO DE LAN√áAMENTO"] == "Cancelamento/Chargeback"]
df_aluguel_maquina = df_santander[df_santander["TIPO DE LAN√áAMENTO"] == "Aluguel/Tarifa"]

#Atualizando a tabela df_santander para todos os valores sem o aluguel de m√°quina, sem cancelamento e sem valores em branco
df_santander = df_santander[df_santander["TIPO DE LAN√áAMENTO"] != "Cancelamento/Chargeback"]
df_santander = df_santander[df_santander["TIPO DE LAN√áAMENTO"] != "Aluguel/Tarifa"]
df_santander = df_santander[df_santander["TIPO DE LAN√áAMENTO"] != "Pagamento Realizado"]
df_santander = df_santander[df_santander["TIPO DE LAN√áAMENTO"] != "Saldo Anterior"]
df_santander = df_santander[df_santander["TIPO DE LAN√áAMENTO"].notna()]

display(df_santander.dtypes)
#display(df_santander)
#Totalizadores
valor_total_bruto = df_santander["VALOR DA PARCELA"].sum()
valor_total_liquido =  df_santander["VALOR L√çQUIDO"].sum()
valor_aluguel_maquina = df_aluguel_maquina["VALOR L√çQUIDO"].sum()
valor_cancelamento_venda = df_cancelamento_venda["VALOR L√çQUIDO"].sum()
valor_recebido_conta = valor_total_liquido - abs(valor_aluguel_maquina) - abs(valor_cancelamento_venda)

#df_cancelamento_venda.to_excel(r"C:\Users\regiel\Documents\PythonAppsSantander\CancelamentoVenda.xlsx", index=False)
#df_santander.to_excel(r"C:\Users\regiel\Documents\PythonAppsSantander\Santander.xlsx", index=False)

print(valor_total_bruto)
print(valor_total_liquido)
print(valor_aluguel_maquina)
print(valor_cancelamento_venda)
print(valor_recebido_conta)

# %%
#Selecionando as colunas desejadas
df_erp = df_erp.filter(items=["1o. Agrupamento", "Chave", "Numero", "NSU", "Autoriza√ß√£o", "Emiss√£o", "Corre√ß√£o", "Valor", "Vr Corrigido"])
#Convertendo colunas para os tipos corretos
#Convertendo colunas para n√∫mero
df_erp["Valor"] = df_erp["Valor"].str.replace(",", ".", regex=True)
df_erp["Valor"] = pd.to_numeric(df_erp["Valor"], errors="coerce")
df_erp["Vr Corrigido"] = df_erp["Vr Corrigido"].str.replace(",", ".", regex=True)
df_erp["Vr Corrigido"] = pd.to_numeric(df_erp["Vr Corrigido"], errors="coerce")
#Convertendo colunas para data
df_erp["Emiss√£o"] = pd.to_datetime(df_erp["Emiss√£o"], format="%d/%m/%Y", errors="coerce")
df_erp["Corre√ß√£o"] = pd.to_datetime(df_erp["Corre√ß√£o"], format="%d/%m/%Y", errors="coerce")
#Transformando o campo Numero em Parcela e Total de Parcelas
# Criar as novas colunas extraindo os valores corretos da coluna "Numero"
df_erp["chcriacao"] = df_erp["Numero"].str.split("-").str[0]  # Antes do "-"
df_erp["Parcela"] = df_erp["Numero"].str.split("-").str[1].str.split("/").str[0]  # Entre "-" e "/"
df_erp["Total_Parcelas"] = df_erp["Numero"].str.split("/").str[1]  # Ap√≥s "/"

# Converter as colunas de parcela para inteiro
df_erp["Parcela"] = pd.to_numeric(df_erp["Parcela"], errors="coerce").fillna(1).astype(int)
df_erp["Total_Parcelas"] = pd.to_numeric(df_erp["Total_Parcelas"], errors="coerce").fillna(1).astype(int)
df_erp = df_erp.filter(items=["1o. Agrupamento", "Chave", "chcriacao", "Parcela", "Total_Parcelas", "NSU", "Autoriza√ß√£o", "Emiss√£o", "Corre√ß√£o", "Valor", "Vr Corrigido"])

#Selecionando apenas os t√≠tulos da industria
df_erp_loja = df_erp[~df_erp["1o. Agrupamento"].isin(["LE SFR Ind√∫stria Ltda", "LE Protendidos"])].copy()


display(df_erp_loja.dtypes)
#display(df_erp_loja)


# %%
#Fun√ß√µes Conciliar por valor e data e conciliando buscando autoriza√ß√µes parecidas

def conciliar_por_data_e_valores(row, df_erp_base):
    #print("\nüîç Buscando correspond√™ncia por data e valores para:", row["AUTORIZA√á√ÉO"])

    # 1Ô∏è‚É£ Filtra por datas com at√© 5 dias de diferen√ßa
    data_diferenca = (df_erp_base["Emiss√£o"] - row["DATA DA VENDA"]).abs().dt.days
    #print(f"‚Üí Diferen√ßa de dias entre 'Emiss√£o' e 'DATA DA VENDA':\n{data_diferenca.describe()}")

    candidatos = df_erp_base[data_diferenca <= 1]
    #print(f"‚Üí Candidatos com diferen√ßa de at√© 5 dias: {len(candidatos)}")

    # 2Ô∏è‚É£ Filtra por valor, parcela e total de parcelas
    candidatos = candidatos[
        ((candidatos["Valor"] - row["VALOR DA PARCELA"]).abs() <= 0.12
        ) &
        (candidatos["Parcela"] == row["PARCELA"]) &
        (candidatos["Total_Parcelas"] == row["TOTAL_PARCELAS"])
    ]

    #print(f"‚Üí Candidatos com valores compat√≠veis e parcelas iguais: {len(candidatos)}")
    if not candidatos.empty:
        linha = candidatos.iloc[0]

        #print(f"‚úÖ Conciliado com:\n"
        #      f"   Autoriza√ß√£o: {linha['Autoriza√ß√£o']}\n"
        #      f"   Valor ERP: {linha['Valor']} | Valor Banco: {row['VALOR DA PARCELA']}\n"
        #      f"   Data ERP: {linha['Emiss√£o']} | Data Venda: {row['DATA DA VENDA']}\n"
        #      f"   Parcela: {linha['Parcela']} | Total Parcelas: {linha['Total_Parcelas']}\n")

        return pd.Series([
            linha["Autoriza√ß√£o"],
            linha["Chave"],
            linha["Valor"],
            "Conciliado por Data e Valores",
            10
        ])
    
    #print("‚ùå Nenhuma correspond√™ncia encontrada com os crit√©rios de data, valor e parcelas.")
    return pd.Series([None, None, None, "N√£o Conciliado", 99])

def encontrar_melhor_correspondencia_com_pontuacao(row, df_origem, coluna_erp):
    correspondencias = process.extract(
        str(row["AUTORIZA√á√ÉO"]),
        df_origem[coluna_erp].astype(str),
        scorer=fuzz.ratio,
        limit=10
    )

    correspondencias_validas = [(texto, score, idx) for texto, score, idx in correspondencias if score >= 80]

    #print(f"\nüîç Buscando correspond√™ncia para: {row['AUTORIZA√á√ÉO']}")
    #print("Correspond√™ncias v√°lidas (score >= 80):", correspondencias_validas)

    if not correspondencias_validas:
        return pd.Series([None, None, None, "N√£o Conciliado", 99])

    melhor_resultado = None
    menor_pontuacao = float("inf")

    for melhor_correspondencia, melhor_pontuacao, _ in correspondencias_validas:
        filtro = df_origem[df_origem[coluna_erp] == melhor_correspondencia]

        if filtro.empty:
            #print(f"‚ö† Correspond√™ncia '{melhor_correspondencia}' n√£o encontrada no DataFrame.")
            continue

        # üîÑ Itera sobre todas as linhas com o mesmo valor
        for _, linha_correspondente in filtro.iterrows():
            valor_erp = linha_correspondente["Valor"]
            data_erp = linha_correspondente["Emiss√£o"]
            parcela_erp = linha_correspondente["Parcela"]
            total_parcelas_erp = linha_correspondente["Total_Parcelas"]

            status = ["Conciliado"]
            pontuacao = 0

            if abs(row["VALOR DA PARCELA"] - valor_erp) > 0.10:
                status.append("Diverg√™ncia de Valor")
                pontuacao += 15

            if abs((row["DATA DA VENDA"] - data_erp).days) > 1:
                status.append("Diverg√™ncia de Data")
                pontuacao += 5

            if row["PARCELA"] != parcela_erp:
                status.append("Diverg√™ncia de Parcela")
                pontuacao += 10

            if row["TOTAL_PARCELAS"] != total_parcelas_erp:
                status.append("Diverg√™ncia de Total de Parcelas")
                pontuacao += 15

            #print("üî∏ Analisando:", melhor_correspondencia)
            #print("    ‚Üí Valor ERP:", valor_erp)
            #print("    ‚Üí Data ERP:", data_erp)
            #print("    ‚Üí Parcela ERP:", parcela_erp)
            #print("    ‚Üí Total Parcelas ERP:", total_parcelas_erp)
            #print("    ‚Üí Status:", status)
            #print("    ‚Üí Pontua√ß√£o calculada:", pontuacao)
            #print("    ‚Üí Menor pontua√ß√£o at√© agora:", menor_pontuacao)

            if pontuacao < menor_pontuacao:
                menor_pontuacao = pontuacao
                melhor_resultado = (
                    linha_correspondente[coluna_erp],
                    linha_correspondente["Chave"],
                    valor_erp,
                    " e ".join(status) if len(status) > 1 else status[0],
                    pontuacao
                )

    if melhor_resultado:
        #print("‚úÖ Melhor resultado escolhido:", melhor_resultado)
        return pd.Series(melhor_resultado)
    else:
        #print("‚ùå Nenhuma correspond√™ncia com pontua√ß√£o aceit√°vel.")
        return pd.Series([None, None, None, "N√£o Conciliado", 99])
    
def encontrar_melhor_correspondencia_com_pontuacao_nsu(row, df_origem):
    correspondencias = process.extract(
        str(row["N√öMERO COMPROVANTE DE VENDA (NSU)"]),
        df_origem["NSU"].astype(str),
        scorer=fuzz.ratio,
        limit=10
    )

    correspondencias_validas = [(texto, score, idx) for texto, score, idx in correspondencias if score >= 80]

    print(f"\nüîç Buscando correspond√™ncia para: {row['N√öMERO COMPROVANTE DE VENDA (NSU)']}")
    print("Correspond√™ncias v√°lidas (score >= 80):", correspondencias_validas)

    if not correspondencias_validas:
        return pd.Series([None, None, None, "N√£o Conciliado", 99])

    melhor_resultado = None
    menor_pontuacao = float("inf")

    for melhor_correspondencia, melhor_pontuacao, _ in correspondencias_validas:
        filtro = df_origem[df_origem["NSU"] == melhor_correspondencia]

        if filtro.empty:
            print(f"‚ö† Correspond√™ncia '{melhor_correspondencia}' n√£o encontrada no DataFrame.")
            continue

        # üîÑ Itera sobre todas as linhas com o mesmo valor
        for _, linha_correspondente in filtro.iterrows():
            valor_erp = linha_correspondente["Valor"]
            data_erp = linha_correspondente["Emiss√£o"]
            parcela_erp = linha_correspondente["Parcela"]
            total_parcelas_erp = linha_correspondente["Total_Parcelas"]

            status = ["Conciliado"]
            pontuacao = 0

            if abs(row["VALOR DA PARCELA"] - valor_erp) > 0.09:
                status.append("Diverg√™ncia de Valor")
                pontuacao += 15

            if abs((row["DATA DA VENDA"] - data_erp).days) > 1:
                status.append("Diverg√™ncia de Data")
                pontuacao += 5

            if row["PARCELA"] != parcela_erp:
                status.append("Diverg√™ncia de Parcela")
                pontuacao += 10

            if row["TOTAL_PARCELAS"] != total_parcelas_erp:
                status.append("Diverg√™ncia de Total de Parcelas")
                pontuacao += 15

            print("üî∏ Analisando:", melhor_correspondencia)
            print("    ‚Üí Valor ERP:", valor_erp)
            print("    ‚Üí Data ERP:", data_erp)
            print("    ‚Üí Parcela ERP:", parcela_erp)
            print("    ‚Üí Total Parcelas ERP:", total_parcelas_erp)
            print("    ‚Üí Status:", status)
            print("    ‚Üí Pontua√ß√£o calculada:", pontuacao)
            print("    ‚Üí Menor pontua√ß√£o at√© agora:", menor_pontuacao)

            if pontuacao < menor_pontuacao:
                menor_pontuacao = pontuacao
                melhor_resultado = (
                    linha_correspondente["NSU"],
                    linha_correspondente["Chave"],
                    valor_erp,
                    " e ".join(status) if len(status) > 1 else status[0],
                    pontuacao
                )

    if melhor_resultado:
        print("‚úÖ Melhor resultado escolhido:", melhor_resultado)
        return pd.Series(melhor_resultado)
    else:
        print("‚ùå Nenhuma correspond√™ncia com pontua√ß√£o aceit√°vel.")
        return pd.Series([None, None, None, "N√£o Conciliado", 99])

# %%
#Remover da Planilha Santander os T√≠tulos que foram cancelados
# 1Ô∏è‚É£ Criar coluna auxiliar com valor absoluto da parcela
df_santander["VALOR_ABS"] = df_santander["VALOR DA PARCELA"].abs()
df_cancelamento_venda["VALOR_ABS"] = df_cancelamento_venda["VALOR DA PARCELA"].abs()

# 2Ô∏è‚É£ Criar chave composta: AUTORIZA√á√ÉO + VALOR_ABS
df_santander["CHAVE_CONCILIACAO"] = df_santander["AUTORIZA√á√ÉO"].astype(str) + "_" + df_santander["VALOR_ABS"].astype(str)
df_cancelamento_venda["CHAVE_CONCILIACAO"] = df_cancelamento_venda["AUTORIZA√á√ÉO"].astype(str) + "_" + df_cancelamento_venda["VALOR_ABS"].astype(str)

# 3Ô∏è‚É£ Verificar chaves em comum
chaves_comuns = set(df_santander["CHAVE_CONCILIACAO"]) & set(df_cancelamento_venda["CHAVE_CONCILIACAO"])
print("üîç Chaves encontradas em comum:", len(chaves_comuns))
print("üëÄ Exemplo de chaves comuns:", list(chaves_comuns)[:5])

# 4Ô∏è‚É£ Filtrar as linhas da df_santander que est√£o na lista de cancelamentos
filtro_cancelados = df_santander["CHAVE_CONCILIACAO"].isin(df_cancelamento_venda["CHAVE_CONCILIACAO"])
print("‚úÇÔ∏è Linhas encontradas para recorte:", filtro_cancelados.sum())

# 5Ô∏è‚É£ Copiar essas linhas
df_cancelados_encontrados = df_santander[filtro_cancelados].copy()
#df_cancelados_encontrados["Status"] = "Cancelado"
#df_cancelados_encontrados["Pontua√ß√£o"] = 101

# 6Ô∏è‚É£ Adicionar ao df_cancelamento_venda
df_cancelamento_venda = pd.concat([df_cancelamento_venda, df_cancelados_encontrados], ignore_index=True)

# 7Ô∏è‚É£ Remover da df_santander
df_santander = df_santander[~filtro_cancelados].copy()

# 8Ô∏è‚É£ Resultado final
print("‚úÖ Linhas restantes em df_santander:", len(df_santander))
print("‚úÖ Linhas totais em df_cancelamento_venda:", len(df_cancelamento_venda))
#display(df_cancelamento_venda)
#df_cancelamento_venda.to_excel(r"C:\Users\regiel\Documents\PythonAppsSantander\CancelamentoVenda02.xlsx", index=False)


# %%
#Primeira concilia√ß√£o, procurar com todos os campos iguais. Ser√° se vale a pena separar por loja?

df_primeira_conciliacao = df_santander.merge(
    df_erp_loja[["Chave", "Autoriza√ß√£o", "NSU", "Emiss√£o", "Parcela", "Total_Parcelas", "Valor"]],
    left_on=["AUTORIZA√á√ÉO", "DATA DA VENDA", "PARCELA", "TOTAL_PARCELAS"],
    right_on=["Autoriza√ß√£o", "Emiss√£o", "Parcela", "Total_Parcelas"],
    how="left"
)

#display(df_primeira_conciliacao) #Apenas debug 

#Criar totalizadores - Acompanhar quanto falta a conciliar do arquivo original

df_pri_conc_nao_conc = df_primeira_conciliacao[df_primeira_conciliacao["Chave"].isna()]
df_primeira_conciliacao = df_primeira_conciliacao[df_primeira_conciliacao["Chave"].notna()]
df_primeira_conciliacao["Status"] = "Conciliado"
df_primeira_conciliacao["Pontua√ß√£o"] = 0
display("Aqui est√° a primeira concilia√ß√£o:")
display(df_primeira_conciliacao)


# %%
df_segunda_conciliacao = df_pri_conc_nao_conc.filter(items=["EC CENTRALIZADOR", "DATA DE VENCIMENTO", "TIPO DE LAN√áAMENTO", "PARCELAS", "AUTORIZA√á√ÉO", "N√öMERO COMPROVANTE DE VENDA (NSU)", "DATA DA VENDA","VALOR DA PARCELA", "VALOR L√çQUIDO", "PARCELA", "TOTAL_PARCELAS"])
df_segunda_conciliacao[["Melhor Autoriza√ß√£o", "Chave ERP", "Valor ERP", "Status", "Pontua√ß√£o"]] = df_segunda_conciliacao.apply(
    lambda row: conciliar_por_data_e_valores(row, df_erp),
    axis=1
)

# %%
df_terceira_conciliacao = df_segunda_conciliacao[df_segunda_conciliacao["Chave ERP"].isna()]
df_segunda_conciliacao = df_segunda_conciliacao[df_segunda_conciliacao["Chave ERP"].notna()]
#display(df_terceira_conciliacao)
#display(df_segunda_conciliacao)

# %%
df_terceira_conciliacao[["Melhor Autoriza√ß√£o", "Chave ERP", "Valor ERP", "Status", "Pontua√ß√£o"]] = df_terceira_conciliacao.apply(
    lambda row: encontrar_melhor_correspondencia_com_pontuacao(row, df_erp, "Autoriza√ß√£o"),
    axis=1
)
df_quarta_conciliacao = df_terceira_conciliacao[df_terceira_conciliacao["Pontua√ß√£o"] >= 6]
#display(df_quarta_conciliacao)
df_terceira_conciliacao = df_terceira_conciliacao[df_terceira_conciliacao["Pontua√ß√£o"] < 6]
#display(df_terceira_conciliacao)

# %%
#df_terceira_conciliacao.to_excel(r"C:\Users\regiel\Documents\PythonAppsSantander\ConciliacaoTerceira.xlsx", index=False)
#df_erp_loja.to_excel(r"C:\Users\regiel\Documents\PythonAppsSantander\ConciliacaoERPLoja.xlsx", index=False)
display(df_terceira_conciliacao)
display(df_quarta_conciliacao)

# %%
#df_quarta_conciliacao.to_excel(r"C:\Users\yan.fernandes\Downloads\QuartaConciliacao.xlsx", index=False)
df_segunda_conciliacao.to_excel(r"C:\Users\yan.fernandes\Downloads\SegundaConciliacao.xlsx", index=False)



